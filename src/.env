# Configurable environment variables
####################################

# Github/Gitlab org of the ROM
ENV ORG_NAME="LineageOS"

# Name of the vendor source
ENV VENDOR_NAME="lineage"

# Environment for the LineageOS branches name
# See https://github.com/LineageOS/android_vendor_lineage/branches for possible options
BRANCH_NAME="${VENDOR_NAME}-17.1"

# Environment for the device list (separate by comma if more than one)
# eg. DEVICE_LIST=hammerhead,bullhead,angler
DEVICE_LIST=""

# If specified proprietary files are only downloaded for this comma-separated list of manufacturers
DEVICE_VENDORS=""

# Release type string
RELEASE_TYPE="UNOFFICIAL"

# Repo use for build
ENV REPO="https://github.com/LineageOS/android.git"

# Repo use for build
ENV MIRROR="https://github.com/LineageOS/mirror"

# OTA URL that will be used inside CMUpdater
# Use this in combination with LineageOTA to make sure your device can auto-update itself from this buildbot
OTA_URL=""

# User identity
USER_NAME="${ORG_NAME} Buildbot"
USER_MAIL="${ORG_NAME,,}-buildbot@docker.host"

# By default we want to use CCACHE, you can disable this
# WARNING: disabling this may slow down a lot your builds!
USE_CCACHE=1

# We need to specify the ccache binary since it is no longer packaged along with AOSP
CCACHE_EXEC=/usr/bin/ccache

# ccache maximum size. It should be a number followed by an optional suffix: k,
# M, G, T (decimal), Ki, Mi, Gi or Ti (binary). The default suffix is G. Use 0
# for no limit.
CCACHE_SIZE=50G

# Include proprietary files, downloaded automatically from github.com/TheMuppets/ and gitlab.com/the-muppets/
# Only some branches are supported
INCLUDE_PROPRIETARY=true

# Mount an overlay filesystem over the source dir to do each build on a clean source
BUILD_OVERLAY=false

# Clone the full LineageOS mirror (> 200 GB)
LOCAL_MIRROR=false

# If you want to preserve old ZIPs set this to 'false'
CLEAN_OUTDIR=false

# Change this cron rule to what fits best for you
# Use 'now' to start the build immediately
# For example, '0 10 * * *' means 'Every day at 10:00 UTC'
CRONTAB_TIME=now

# Put the boot.img in the zips directory
BOOT_IMG=false

# Clean artifacts output after each build
CLEAN_AFTER_BUILD=true

# Provide root capabilities builtin inside the ROM (see http://lineageos.org/Update-and-Build-Prep/)
WITH_SU=false

# Provide a default JACK configuration in order to avoid out-of-memory issues
ANDROID_JACK_VM_ARGS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G"

# Custom packages to be installed
CUSTOM_PACKAGES=""

# Sign the builds with the keys in $KEYS_DIR
SIGN_BUILDS=false

# When SIGN_BUILDS = true but no keys have been provided, generate a new set with this subject
KEYS_SUBJECT="/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com"

# Move the resulting zips to $ZIP_DIR/$codename instead of $ZIP_DIR/
ZIP_SUBDIR=true

# Write the verbose logs to $LOGS_DIR/$codename instead of $LOGS_DIR/
LOGS_SUBDIR=true

# Apply the MicroG's signature spoofing patch
# Valid values are "no", "yes" (for the original MicroG's patch) and
# "restricted" (to grant the permission only to the system privileged apps).
#
# The original ("yes") patch allows user apps to gain the ability to spoof
# themselves as other apps, which can be a major security threat. Using the
# restricted patch and embedding the apps that requires it as system privileged
# apps is a much secure option. See the README.md ("Custom mode") for an
# example.
SIGNATURE_SPOOFING="no"

# Apply the microG unifiedNLP patch
SUPPORT_UNIFIEDNLP=false

# Generate delta files
BUILD_DELTA=false

# Delete old zips in $ZIP_DIR, keep only the N latest one (0 to disable)
DELETE_OLD_ZIPS=0

# Delete old deltas in $DELTA_DIR, keep only the N latest one (0 to disable)
DELETE_OLD_DELTAS=0

# Delete old logs in $LOGS_DIR, keep only the N latest one (0 to disable)
DELETE_OLD_LOGS=0

# Create a JSON file that indexes the build zips at the end of the build process
# (for the updates in OpenDelta). The file will be created in $ZIP_DIR with the
# specified name; leave empty to skip it.
# Requires ZIP_SUBDIR.
OPENDELTA_BUILDS_JSON=""

# You can optionally specify a USERSCRIPTS_DIR volume containing these scripts:
#  * begin.sh, run at the very beginning
#  * before.sh, run after the syncing and patching, before starting the builds
#  * pre-build.sh, run before the build of every device
#  * post-build.sh, run after the build of every device
#  * end.sh, run at the very end
# Each script will be run in $SRC_DIR and must be owned and writeable only by
# root